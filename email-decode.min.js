/*
 * email-decode.min.js (Simplified Example)
 * A basic script to decode email addresses obfuscated in HTML to deter spam bots.
 */
(function() {
    function decodeEmail(encodedString) {
        // Simple base64-like decoding or character code shifting can be used.
        // For this example, let's assume a very simple character code shift.
        // This is a very basic example; real-world obfuscation might be more complex.
        let decoded = '';
        for (let i = 0; i < encodedString.length; i++) {
            decoded += String.fromCharCode(encodedString.charCodeAt(i) - 1); // Shift character code back by 1
        }
        return decoded;
    }

    // Function to process all elements with a specific class or data attribute
    function processEmailElements() {
        // Look for elements that have a data attribute like 'data-email-encoded'
        const encodedEmailElements = document.querySelectorAll('[data-email-encoded]');

        encodedEmailElements.forEach(function(element) {
            const encodedEmail = element.getAttribute('data-email-encoded');
            if (encodedEmail) {
                const decodedEmail = decodeEmail(encodedEmail);
                
                // If it's a link, set href and text content
                if (element.tagName === 'A') {
                    element.href = 'mailto:' + decodedEmail;
                    element.textContent = decodedEmail;
                } else {
                    // For other elements, just set text content
                    element.textContent = decodedEmail;
                }
                // Optionally remove the data attribute to prevent re-decoding
                element.removeAttribute('data-email-encoded');
            }
        });
    }

    // Run the processing function when the DOM is fully loaded
    document.addEventListener('DOMContentLoaded', processEmailElements);

    // If you want to use a more common obfuscation method, like reversing the string:
    /*
    function reverseString(str) {
        return str.split('').reverse().join('');
    }

    // Example Usage in HTML: <a href="#" data-email-encoded="moc.elpmaxe@liame"></a>
    // Then in JS: element.textContent = reverseString(encodedEmail);
    // And element.href = 'mailto:' + reverseString(encodedEmail);
    */

    // Another common method is to replace '.' and '@' with custom placeholders
    /*
    function decodePlaceholderEmail(encodedString) {
        return encodedString.replace(/\[dot]/g, '.').replace(/\[at]/g, '@');
    }
    // Example Usage in HTML: <a href="#" data-email-encoded="email[at]example[dot]com"></a>
    // Then in JS: element.textContent = decodePlaceholderEmail(encodedEmail);
    // And element.href = 'mailto:' + decodePlaceholderEmail(encodedEmail);
    */

})();
